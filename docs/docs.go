// Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/admin/{secret_key}": {
            "get": {
                "description": "В строку запроса передаётся секретный ключ, по которому возвращается информация о ссылке.",
                "produces": [
                    "application/json"
                ],
                "summary": "Возвращает информацию о ссылке.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.getLinkInfoResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "В строку запроса передаётся секретный ключ, по которому удаляется ссылка.",
                "produces": [
                    "application/json"
                ],
                "summary": "Удаляет ссылку.",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth": {
            "post": {
                "description": "В формате json передаётся login и password. В ответ возвращается токен.",
                "produces": [
                    "application/json"
                ],
                "summary": "Авторизует пользователя.",
                "parameters": [
                    {
                        "description": "make_shorter_request",
                        "name": "auth_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.requestAuth"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.responseAuth"
                        }
                    },
                    "400": {
                        "description": "Возвращает \"bad password\" если пароль не валидный, \"user not found\" если пользователь не найден, \"wrong password\" если пароль не совпадает",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/get_urls_list/{token}": {
            "get": {
                "description": "В строку запроса передаётся токен, по которому возвращается массив.",
                "produces": [
                    "application/json"
                ],
                "summary": "Возвращает массив секретных ключей.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.getUrlsListResponse"
                        }
                    },
                    "401": {
                        "description": "Если токен не найден",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/make_shorter": {
            "post": {
                "description": "В формате json передаётся url и опционально остальные параметры. В ответ возвращаются секретный ключ и краткая ссылка. Если не передан vip_key, то ссылка автоматически генерируется, а если передан, то vip_key и будет использоваться как краткий ключ.",
                "produces": [
                    "application/json"
                ],
                "summary": "Создаёт ссылку.",
                "parameters": [
                    {
                        "description": "Я не разобрался как тут указать, что всё кроме url nullable, поэтому напоминаю! И ещё, если всё-таки делаете vip-key, то обязательными становятся все поля. time_to_live_unit может принимать значения SECONDS, MINUTES, HOURS, DAYS",
                        "name": "make_shorter_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.requestMakeShorter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.responseMakeShorter"
                        }
                    },
                    "400": {
                        "description": "Сообщения при различных ошибках валидации. Если передано пустое поле url, то возвращается ошибка \"url is empty\". Если передано некорректное значение time_to_live_unit или time_to_live \u003c= 0, то возвращается ошибка \"time to live unit or time to live is invalid\". Если vip_key уже сущетсвует в базе данных, то возвращается ошибка \"vip key is already in use\".",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "401": {
                        "description": "Если токен не найден",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/registration": {
            "post": {
                "description": "В формате json передаётся login, email и password. В ответ возвращается токен.",
                "produces": [
                    "application/json"
                ],
                "summary": "Регистрирует пользователя.",
                "parameters": [
                    {
                        "description": "requestUser",
                        "name": "registration_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.requestUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.responseAuth"
                        }
                    },
                    "400": {
                        "description": "Возвращается, если email не прошёл валидацию или пользователь с таким login или email уже существует.",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    }
                }
            }
        },
        "/{short_url}": {
            "get": {
                "description": "В строку запроса передаётся краткая ссылка, по ней происходит перенаправление на длинную ссылку.",
                "summary": "Перенаправляет пользователя по ссылке.",
                "responses": {
                    "301": {
                        "description": "Moved Permanently"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        }
    },
    "definitions": {
        "v1.errorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "v1.getLinkInfoResponse": {
            "type": "object",
            "properties": {
                "all_redirect_times": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dt_created": {
                    "type": "string"
                },
                "dt_will_delete": {
                    "type": "string"
                },
                "long_url": {
                    "type": "string"
                },
                "number_of_clicks": {
                    "type": "integer"
                },
                "short_url": {
                    "type": "string"
                }
            }
        },
        "v1.getUrlsListResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.requestAuth": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "v1.requestMakeShorter": {
            "type": "object",
            "properties": {
                "time_to_live": {
                    "type": "integer"
                },
                "time_to_live_unit": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "vip_key": {
                    "type": "string"
                }
            }
        },
        "v1.requestUser": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "v1.responseAuth": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "v1.responseMakeShorter": {
            "type": "object",
            "properties": {
                "secret_key": {
                    "type": "string"
                },
                "short_url": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Shortener service",
	Description:      "Сервис, позволяющий укорачивать ссылки.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
